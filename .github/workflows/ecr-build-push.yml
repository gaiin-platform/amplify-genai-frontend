name: Docker image build and publish

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      enable_ecr_workflow:
        description: 'Enable ECR workflow'
        type: boolean
        default: false
        required: true

jobs:
  docker:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          audience: sts.amazonaws.com
          role-session-name: GitHubActions

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ vars.AWS_ACCOUNT_ID }}

      # Build and test for feature/bugfix/release PRs (no push)
      - name: Build (test only)
        if: github.event_name == 'pull_request' && (startsWith(github.head_ref, 'feature') || startsWith(github.head_ref, 'bugfix') || startsWith(github.head_ref, 'release'))
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push for main/dev branches and non-feature/bugfix/release PRs
      - name: Build and push
        if: github.event_name != 'pull_request' || (!startsWith(github.head_ref, 'feature') && !startsWith(github.head_ref, 'bugfix') && !startsWith(github.head_ref, 'release'))
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Force new deployment of ECS service
        if: github.event_name != 'pull_request' || (!startsWith(github.head_ref, 'feature') && !startsWith(github.head_ref, 'bugfix') && !startsWith(github.head_ref, 'release'))
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ vars.AWS_REGION }}

      - name: Wait for service stability
        if: github.event_name != 'pull_request' || (!startsWith(github.head_ref, 'feature') && !startsWith(github.head_ref, 'bugfix') && !startsWith(github.head_ref, 'release'))
        run: |
          aws ecs wait services-stable \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --services ${{ vars.ECS_SERVICE }} \
            --region ${{ vars.AWS_REGION }}